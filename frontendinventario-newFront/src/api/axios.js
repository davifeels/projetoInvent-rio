import axios from 'axios';

// ‚úÖ URL do backend (PORTA CORRETA 3000)
const API_BASE_URL = 'http://localhost:3000/api';

// ‚úÖ Basename da aplica√ß√£o (removido pois n√£o estamos usando mais)
const APP_BASENAME = '';

// ‚úÖ Cria inst√¢ncia do axios com configura√ß√µes
const api = axios.create({
  baseURL: API_BASE_URL,
  withCredentials: true, // üî• CR√çTICO PARA CORS
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 30000, // 30 segundos
});

// ‚úÖ Rotas p√∫blicas (n√£o precisam de token)
const PUBLIC_ROUTES = [
  '/auth/login',
  '/auth/solicitar-acesso',
  // '/setores' e '/funcoes' apenas GET podem ser p√∫blicos
  // POST, PUT, DELETE devem exigir autentica√ß√£o
];

// ‚úÖ Verifica se a rota √© p√∫blica
const isPublicRoute = (url, method) => {
  // Rotas completamente p√∫blicas
  if (PUBLIC_ROUTES.some(route => url.includes(route))) {
    return true;
  }
  
  // GET em /setores e /funcoes √© p√∫blico (para listar)
  // Mas POST, PUT, DELETE requerem autentica√ß√£o
  if (method === 'GET' && (url.includes('/setores') || url.includes('/funcoes'))) {
    return true;
  }
  
  return false;
};

// ‚úÖ INTERCEPTOR: Adiciona token antes de enviar requisi√ß√£o
api.interceptors.request.use(
  (config) => {
    // Se n√£o for rota p√∫blica, adiciona o token
    if (!isPublicRoute(config.url)) {
      const token = localStorage.getItem('accessToken');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      } else {
        console.warn('‚ö†Ô∏è Token n√£o encontrado para rota protegida:', config.url);
      }
    }

    // üìù LOG de debug (pode remover em produ√ß√£o)
    console.log(`üì§ ${config.method.toUpperCase()} ${config.url}`);

    return config;
  },
  (error) => {
    console.error('‚ùå Erro no request:', error);
    return Promise.reject(error);
  }
);

// ‚úÖ INTERCEPTOR: Trata respostas e erros
api.interceptors.response.use(
  (response) => {
    // üìù LOG de sucesso (pode remover em produ√ß√£o)
    console.log(`‚úÖ ${response.status} ${response.config.url}`);
    return response;
  },
  (error) => {
    // Trata diferentes tipos de erro
    if (error.response) {
      // Servidor respondeu com erro
      const { status, data } = error.response;

      console.error(`‚ùå Erro ${status}:`, data);

      // Token inv√°lido ou expirado
      if (status === 401 || status === 431) {
        console.warn('‚ö†Ô∏è Sess√£o expirada. Redirecionando para login...');
        
        // üî• LIMPA APENAS O QUE EXISTE
        localStorage.removeItem('accessToken');
        
        // üî• Redireciona RESPEITANDO o basename
        const loginPath = `${APP_BASENAME}/login`;
        if (window.location.pathname !== loginPath) {
          window.location.href = loginPath;
        }
      }

      // Sem permiss√£o
      if (status === 403) {
        console.warn('‚ö†Ô∏è Sem permiss√£o para esta a√ß√£o');
      }

    } else if (error.request) {
      // Request foi enviado mas sem resposta
      console.error('‚ùå Servidor n√£o respondeu:', error.request);
    } else {
      // Erro ao configurar o request
      console.error('‚ùå Erro na configura√ß√£o:', error.message);
    }

    return Promise.reject(error);
  }
);

export default api;