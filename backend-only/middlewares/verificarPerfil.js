// middlewares/verificarPerfil.js
const { registrarAuditoria } = require('../controllers/auditoriaController'); // ADICIONADO (verifique este caminho)

module.exports = (perfisPermitidos = []) => {
    return async (req, res, next) => { // MODIFICADO para async
        try {
            // MUDAN√áA AQUI: de req.usuario para req.user
            if (!req.user) { 
                console.error('üö® Erro de autentica√ß√£o: Nenhum usu√°rio autenticado encontrado em req.user.');
                // ADI√á√ÉO DE AUDITORIA (Opcional, pois authMiddleware j√° pode ter pego)
                // √â um erro de sistema, n√£o de usu√°rio, se req.user n√£o est√° aqui ap√≥s autentica√ß√£o
                try {
                    await registrarAuditoria(
                        req.user?.id || null, // Tenta usar o ID se existir, sen√£o null
                        'ERRO_VERIFICAR_PERFIL_USUARIO_AUSENTE', 
                        req.user?.setor_id || null, // Tenta usar setor_id, sen√£o null
                        { rota: req.originalUrl, ip: req.ip, motivo: 'req.user undefined antes da verifica√ß√£o de perfil' }
                    );
                } catch (auditError) {
                    console.error('Falha ao auditar ERRO_VERIFICAR_PERFIL_USUARIO_AUSENTE:', auditError);
                }
                return res.status(401).json({ // 401 Unauthorized √© o correto para "Autentica√ß√£o necess√°ria"
                    success: false,
                    message: 'Autentica√ß√£o necess√°ria. Informa√ß√µes do usu√°rio ausentes.'
                });
            }

            // MUDAN√áA AQUI: de req.usuario.perfil_id para req.user.perfil_id
            const perfil = req.user.perfil_id; 
            console.log(`[VERIFICAR_PERFIL] üîê Verifica√ß√£o para rota ${req.originalUrl}: Usu√°rio ID ${req.user.id}, Perfil ${perfil}. Perfis permitidos: [${perfisPermitidos.join(', ')}]`);

            if (!perfisPermitidos.includes(perfil)) {
                console.warn(`[VERIFICAR_PERFIL] ‚ö†Ô∏è Acesso negado: Usu√°rio ${req.user.id} com perfil ${perfil} tentou acessar rota que requer [${perfisPermitidos.join(', ')}]`);
                // ADI√á√ÉO DE AUDITORIA
                try {
                    await registrarAuditoria(
                        req.user.id,
                        'TENTATIVA_ACESSO_PERFIL_NEGADO',
                        req.user.setor_id,
                        { rota: req.originalUrl, perfil_necessario: perfisPermitidos.join(', '), perfil_usuario: perfil, ip: req.ip }
                    );
                } catch (auditError) {
                    console.error('Falha ao auditar TENTATIVA_ACESSO_PERFIL_NEGADO:', auditError);
                }
                return res.status(403).json({ // 403 Forbidden √© o correto para "Acesso negado por permiss√£o"
                    success: false,
                    message: 'Acesso negado. Voc√™ n√£o tem permiss√£o para esta a√ß√£o.',
                    details: `Seu perfil (${perfil}) n√£o tem permiss√£o para esta a√ß√£o. Perfis permitidos: ${perfisPermitidos.join(', ')}`
                });
            }
            next(); // Se o perfil √© permitido, continua para a pr√≥xima fun√ß√£o
        } catch (error) {
            // Se houver um erro inesperado no middleware (ex: req.user.perfil_id n√£o existe)
            console.error('Erro inesperado em verificarPerfil:', error);
            // ADI√á√ÉO DE AUDITORIA (para erro inesperado no middleware)
            try {
                await registrarAuditoria(
                    req.user?.id || null, 
                    'ERRO_MIDDLEWARE_VERIFICAR_PERFIL', 
                    req.user?.setor_id || null, 
                    { erro: error.message, rota: req.originalUrl }
                );
            } catch (auditError) {
                console.error('Falha ao auditar ERRO_MIDDLEWARE_VERIFICAR_PERFIL:', auditError);
            }
            res.status(500).json({ success: false, message: 'Erro interno do servidor na verifica√ß√£o de perfil.' });
        }
    };
};